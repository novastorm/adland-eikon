version: "3.9"

services:

  apiserver:
    build: .
    image: eikon-etl
    ports:
      - "${APISERVER_EXTERNAL_PORT}:${APISERVER_INTERNAL_PORT}"
    command: python manage.py run -h 0.0.0.0 -p ${APISERVER_INTERNAL_PORT}
    volumes:
      - .:/app
    environment:
      - FLASK_DEBUG=1
      - APP_SETTINGS=server.config.development
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started

  celery-worker:
    build: .
    image: eikon-etl
    command: celery -A server.tasks worker --loglevel=info
    volumes:
      - .:/app
    environment:
      - FLASK_DEBUG=1
      - APP_SETTINGS=server.config.development
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - apiserver
      - redis

  reverse-proxy:
    image: nginx:1.21.4
    volumes:
      - type: bind
        source: ./compose-service-configs/reverse-proxy/reverse-proxy.conf.template
        target: /etc/nginx/templates/default.conf.template
        read_only: true
      - type: bind
        source: ./compose-service-configs/reverse-proxy/proxy_params
        target: /etc/nginx/proxy_params
        read_only: true
      - type: bind
        source: ./compose-service-configs/reverse-proxy/upstream_params
        target: /etc/nginx/upstream_params
        read_only: true
    ports:
      - "${REVERSE_PROXY_EXTERNAL_PORT}:${REVERSE_PROXY_INTERNAL_PORT}"

    # pass all the .env variables, so we don't have to manually specify each service
    env_file: .env

  postgres:
    image: postgres:15.3
    volumes:
      - type: volume
        source: postgres-database
        target: /var/lib/postgresql/data
    user: postgres
    # use the following command if you want to print all queries
    # command: ["postgres", "-c", "log_statement=all"]
    ports:
      - ${POSTGRES_EXTERNAL_PORT}:5432
    environment:
      POSTGRES_PASSWORD: "password"

  redis:
    image: redis:5.0.14-alpine
    # redis defaults to RDB persistence (https://redis.io/topics/persistence)
    # consider using AOF (--appendonly yes) if people still report issues with cached data
    # disappearing after they restart their docker services
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - type: volume
        source: redis-volume
        target: /data
    ports:
      - ${REDIS_EXTERNAL_PORT}:6379

networks:
  default:
    name: docker-local-dev

# specify the database directories as volumes, to avoid performance overhead of bind mounts
# https://docs.docker.com/storage/volumes/
# https://github.com/docker/for-mac/issues/4981#issuecomment-733796401
# https://engageinteractive.co.uk/blog/making-docker-faster-on-mac
volumes:
  postgres-database:
  redis-volume:
